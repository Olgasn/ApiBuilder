﻿using Microsoft.AspNetCore.Mvc;
using {0};
using {1};

namespace {2};

[Route("api/{3}")]
[ApiController]
public class {4}Controller : ControllerBase
{{
    private readonly I{4}Service _{5}Service;

    public {4}Controller(I{4}Service {5}Service)
    {{
        _{5}Service = {5}Service;
    }}

    [HttpGet]
    public async Task<IActionResult> Get()
    {{
        var {3} = await _{5}Service.Get();

        return Ok({3});
    }}

    [HttpGet("{{id}}")]
    public async Task<IActionResult> GetById({6} id)
    {{
        var {5} = await _{5}Service.GetById(id);

        if ({5} is null)
        {{
            return NotFound($"{4} with id {{id}} is not found.");
        }}
        
        return Ok({5});
    }}

    [HttpPost]
    public async Task<IActionResult> Create([FromBody] {4}ForCreationDto? {5})
    {{
        if ({5} is null)
        {{
            return BadRequest("Object for creation is null");
        }}

        await _{5}Service.Create({5});

        return CreatedAtAction(nameof(Create), {5});
    }}

    [HttpPut("{{id}}")]
    public async Task<IActionResult> Update({6} id, [FromBody] {4}ForUpdateDto? {5})
    {{
        if ({5} is null)
        {{
            return BadRequest("Object for update is null");
        }}

        var isEntityFound = await _{5}Service.Update(id, {5});

        if (!isEntityFound)
        {{
            return NotFound($"{4} with id {{id}} is not found.");
        }}

        return NoContent();
    }}

    [HttpDelete("{{id}}")]
    public async Task<IActionResult> Delete({6} id)
    {{
        var isEntityFound = await _{5}Service.Delete(id);

        if (!isEntityFound)
        {{
            return NotFound($"{4} with id {{id}} is not found.");
        }}

        return NoContent();
    }}
}}