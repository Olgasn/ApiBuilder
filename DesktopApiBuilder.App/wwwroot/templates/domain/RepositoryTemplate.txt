using Microsoft.EntityFrameworkCore;
using System.Linq.Expressions;
using {0};
using {1};

namespace {2};

public class {3}Repository : I{3}Repository
{{
    private AppDbContext _dbContext;

    public {3}Repository(AppDbContext dbContext) 
    {{
        _dbContext = dbContext;
    }}

    public async Task Create({3} entity) => await _dbContext.Set<{3}>().AddAsync(entity);

    public async Task<IEnumerable<{3}>> Get(bool trackChanges) =>
        await (!trackChanges ? _dbContext.Set<{3}>().AsNoTracking() : _dbContext.Set<{3}>()).ToListAsync();

    public async Task<{3}?> GetById({4} id, bool trackChanges) =>
        await (!trackChanges ?
            _dbContext.Set<{3}>().Where(expression).AsNoTracking() :
            _dbContext.Set<{3}>().Where(expression)).SingleOrDefaultAsync();

    public void Delete({3} entity) => _dbContext.Set<{3}>().Remove(entity);

    public void Update({3} entity) => _dbContext.Set<{3}>().Update(entity);

    public async Task SaveChanges() => await _dbContext.SaveChangesAsync();
}}
