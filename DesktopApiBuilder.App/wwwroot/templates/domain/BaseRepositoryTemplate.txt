﻿using Microsoft.EntityFrameworkCore;
using System.Linq.Expressions;
using {0};

namespace {1};

public class BaseRepository<T>(AppDbContext dbContext) : IRepository<T> where T : class
{{
    protected AppDbContext dbContext = dbContext;

    public async Task CreateEntity(T entity) => 
        await dbContext.Set<T>().AddAsync(entity);

    public void DeleteEntity(T entity) =>
        dbContext.Set<T>().Remove(entity);

    public IQueryable<T> GetAllEntities(bool trackChanges) =>
        !trackChanges ? dbContext.Set<T>().AsNoTracking() : dbContext.Set<T>();

    public IQueryable<T> GetByCondition(Expression<Func<T, bool>> expression, bool trackChanges)
    {{
        return !trackChanges ?
            dbContext.Set<T>().Where(expression).AsNoTracking() :
            dbContext.Set<T>().Where(expression);
    }}

    public void UpdateEntity(T entity) =>
        dbContext.Set<T>().Update(entity);
}}