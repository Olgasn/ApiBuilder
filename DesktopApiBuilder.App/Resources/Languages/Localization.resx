<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddEntityBtn" xml:space="preserve">
    <value>Add entity</value>
  </data>
  <data name="AddEntityClassBtn" xml:space="preserve">
    <value>Add entity class</value>
  </data>
  <data name="AddPropertyBtn" xml:space="preserve">
    <value>Add property</value>
  </data>
  <data name="ApplyMigrationLabel" xml:space="preserve">
    <value>Apply migration automatically</value>
  </data>
  <data name="ArchitectureType.Clean" xml:space="preserve">
    <value>Clean</value>
  </data>
  <data name="ArchitectureType.Custom" xml:space="preserve">
    <value>Custom</value>
  </data>
  <data name="ArchitectureType.ThreeLayered" xml:space="preserve">
    <value>Three-layered</value>
  </data>
  <data name="ArchitectureTypeLabel" xml:space="preserve">
    <value>Architecture type</value>
  </data>
  <data name="BackToInfraBtn" xml:space="preserve">
    <value>Back to infrastructure setup</value>
  </data>
  <data name="CancelBtn" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="ChooseFolderBtn" xml:space="preserve">
    <value>Choose Folder</value>
  </data>
  <data name="ClassesCreatedMessage" xml:space="preserve">
    <value>Classes for solution "{0}" were succesfully created!</value>
  </data>
  <data name="CloseBtn" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="ConfigFileNameLabel" xml:space="preserve">
    <value>Config File Name</value>
  </data>
  <data name="ConfigFileText" xml:space="preserve">
    <value>Config file "{0}" was succesfully created in "{1}".</value>
  </data>
  <data name="ConfigFileTitleText" xml:space="preserve">
    <value>Success</value>
  </data>
  <data name="ConnectionStringIsRequiredError" xml:space="preserve">
    <value>Connection string is required</value>
  </data>
  <data name="ConnectionStringLabel" xml:space="preserve">
    <value>Connection string</value>
  </data>
  <data name="CreateClassesBtn" xml:space="preserve">
    <value>Create classes</value>
  </data>
  <data name="CreateProjectsBtn" xml:space="preserve">
    <value>Create projects</value>
  </data>
  <data name="CreateSolutionBtn" xml:space="preserve">
    <value>Create Solution</value>
  </data>
  <data name="CsharpErrorAttribute" xml:space="preserve">
    <value>Cannot use C# keywords</value>
  </data>
  <data name="CustomArchitectureSetupLink" xml:space="preserve">
    <value>Custom architecture setup</value>
  </data>
  <data name="CustomArchitectureSetupPageTitle" xml:space="preserve">
    <value>Custom Architecture Setup</value>
  </data>
  <data name="DatabaseNameLabel" xml:space="preserve">
    <value>Database name (default value: {0}Db)</value>
  </data>
  <data name="DeleteBtn" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="DirectoryPathLabel" xml:space="preserve">
    <value>{0}/{1} directory name</value>
  </data>
  <data name="DomainDefinitionPageTitle" xml:space="preserve">
    <value>Domain Definition</value>
  </data>
  <data name="EditBtn" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="EditEntityBtn" xml:space="preserve">
    <value>Edit entity</value>
  </data>
  <data name="EntityError" xml:space="preserve">
    <value>Entity with name "{0}" is already exists.</value>
  </data>
  <data name="EntityNameTableLable" xml:space="preserve">
    <value>Entity name</value>
  </data>
  <data name="EntityPluralNameLabel" xml:space="preserve">
    <value>Entity plural name</value>
  </data>
  <data name="ExecutionTimeoutErrorMessage" xml:space="preserve">
    <value>Execution timeout: something went wrong!</value>
  </data>
  <data name="FieldIsRequiredErrorAttribute" xml:space="preserve">
    <value>Field is required</value>
  </data>
  <data name="FinalPageMessage" xml:space="preserve">
    <value>Your solution is ready to use</value>
  </data>
  <data name="HostLabel" xml:space="preserve">
    <value>Host</value>
  </data>
  <data name="IdTypeLabel" xml:space="preserve">
    <value>ID Type</value>
  </data>
  <data name="InfrastructureSettingsPageTitle" xml:space="preserve">
    <value>Infrastructure settings</value>
  </data>
  <data name="NextBtn" xml:space="preserve">
    <value>Next</value>
  </data>
  <data name="OkBtn" xml:space="preserve">
    <value>Ok</value>
  </data>
  <data name="OldProjectNameLabel" xml:space="preserve">
    <value>{0} project name</value>
  </data>
  <data name="PasswordLabel" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="PasswordOptionalLabel" xml:space="preserve">
    <value>Password (optional)</value>
  </data>
  <data name="Portlabel" xml:space="preserve">
    <value>Port</value>
  </data>
  <data name="ProjectsCreatedMessage" xml:space="preserve">
    <value>Projects for solution "{0}" were succesfully created!</value>
  </data>
  <data name="PropertyNameRequiredError" xml:space="preserve">
    <value>Property name is required</value>
  </data>
  <data name="PropertyNameTableLable" xml:space="preserve">
    <value>Property name</value>
  </data>
  <data name="PropertyTypeRequiredError" xml:space="preserve">
    <value>Property type is required</value>
  </data>
  <data name="PropertyTypeTableLable" xml:space="preserve">
    <value>Property type</value>
  </data>
  <data name="SaveBtn" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="SetupBtn" xml:space="preserve">
    <value>Setup</value>
  </data>
  <data name="SetupDbBtn" xml:space="preserve">
    <value>Setup DB connection + Add initial migration</value>
  </data>
  <data name="SolurionNameRequiredErrorMessage" xml:space="preserve">
    <value>Solution name is required</value>
  </data>
  <data name="SolutionCreatedMessage" xml:space="preserve">
    <value>Solution "{0}" was successfully created!</value>
  </data>
  <data name="SolutionNameLabel" xml:space="preserve">
    <value>Solution Name</value>
  </data>
  <data name="SolutionPathInputLabel" xml:space="preserve">
    <value>Solution Path</value>
  </data>
  <data name="SolutionPathRequiredErrorMessage" xml:space="preserve">
    <value>Solution path is required</value>
  </data>
  <data name="SpecialSymbolsErrorAttribute" xml:space="preserve">
    <value>Cannot use special symbols</value>
  </data>
  <data name="SQLProviderMessage" xml:space="preserve">
    <value>SQL Provider</value>
  </data>
  <data name="SqlProviders.MSSqlServer" xml:space="preserve">
    <value>MS SQL Server</value>
  </data>
  <data name="SqlProviders.Other" xml:space="preserve">
    <value>Other</value>
  </data>
  <data name="SqlProviders.Postgres" xml:space="preserve">
    <value>Postgres</value>
  </data>
  <data name="SQLServerNameLabel" xml:space="preserve">
    <value>SQL server name</value>
  </data>
  <data name="SuggestedConnectionStringLabel" xml:space="preserve">
    <value>Suggested connection string</value>
  </data>
  <data name="TypeIdTipLable" xml:space="preserve">
    <value>*If you want to add the navigation property, you won't need to create TypeId property manually</value>
  </data>
  <data name="UploadConfigFileBtn" xml:space="preserve">
    <value>Upload Config File</value>
  </data>
  <data name="UsernameLabel" xml:space="preserve">
    <value>Username</value>
  </data>
  <data name="UsernameOptionalLabel" xml:space="preserve">
    <value>Username (optional)</value>
  </data>
</root>