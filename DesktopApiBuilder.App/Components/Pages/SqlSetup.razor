@page "/sql"
@inject NavigationManager Navigation

<MudTextField @bind-Value=_sqlServerName Required RequiredError="SQL server name is required" Label="SQL server name" />
<MudTextField @bind-Value=_dbName Label=@($"Database name (default value: {InMemoryUserSettings.SolutionName}Db)") />
<MudCheckBox @bind-Value=_applyMigration Label="Apply migration automatically"/>

<div class="d-flex flex-row mt-4 align-center">
    <MudButton OnClick="SetConnectionString" Variant="Variant.Outlined" Disabled=@(string.IsNullOrEmpty(_sqlServerName) || _isLoading)>
        Setup DB connection + Add initial migration
    </MudButton>
    @if (_isLoading)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate Class="ml-4" Size="Size.Small" />
    }
</div>

@code {
    private string? _sqlServerName = "DESKTOP-0SM65GV\\\\SQLEXPRESS";
    private string? _dbName;
    private bool _applyMigration;
    private bool _isLoading;

    private async Task SetConnectionString()
    {
        if (string.IsNullOrEmpty(_sqlServerName))
        {
            return;
        }

        SqlService.SetupSqlConnection(new SolutionSettingsModel()
        {
            SolutionName = InMemoryUserSettings.SolutionName,
            SolutionPath = InMemoryUserSettings.SolutionPath,
            ArchitectureType = InMemoryUserSettings.ArchitectureType
        }, _sqlServerName, _dbName ?? $"{InMemoryUserSettings.SolutionName}Db");

        SqlService.AddMigration(new SolutionSettingsModel()
        {
            SolutionName = InMemoryUserSettings.SolutionName,
            SolutionPath = InMemoryUserSettings.SolutionPath,
            ArchitectureType = InMemoryUserSettings.ArchitectureType
        }, "Initial", _applyMigration);

        _isLoading = true;
        StateHasChanged();

        await Task.Delay(10000);

        _isLoading = false;
        StateHasChanged();

        Navigation.NavigateTo("/final");
    }
}
