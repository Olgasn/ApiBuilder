@page "/sql"
@inject NavigationManager Navigation
@inject IStringLocalizer<Localization> Localizer

@if (InMemoryUserSettings.SqlProvider == SqlProviders.MSSqlServer)
{
    <div class="d-flex flex-row align-center">
        <MudTextField Class="mt-2 mr-1" @bind-Value=_sqlSettings.ServerName Label=@Localizer["SQLServerNameLabel"] Immediate TextChanged="OnServerNameChanged" />
        <MudTextField Class="mt-2 ml-1" @bind-Value=_sqlSettings.DbName Label=@Localizer["DatabaseNameLabel", InMemoryUserSettings.SolutionName] Immediate TextChanged="OnDdNameChanged" />
    </div>
    <div class="d-flex flex-row align-center">
        <MudTextField Class="mt-2 mr-1" @bind-Value=_sqlSettings.Username Label=@Localizer["UsernameOptionalLabel"] Immediate TextChanged="OnUsernameChanged" />
        <MudTextField Class="mt-2 ml-1" @bind-Value=_sqlSettings.Password Label=@Localizer["PasswordOptionalLabel"] Immediate TextChanged="OnPasswordChanged" />
    </div>
    <div class="d-flex flex-row align-center">
        <MudTextField Class="mt-4" @bind-Value=_connectionString Disabled=@(!_editSqlConnection) Required RequiredError=@Localizer["ConnectionStringIsRequiredError"] Label=@Localizer["SuggestedConnectionStringLabel"] />
        <MudButton OnClick=@(() => _editSqlConnection = true) Variant="Variant.Outlined" Disabled=_editSqlConnection>@Localizer["EditBtn"]</MudButton>
    </div>
}

@if (InMemoryUserSettings.SqlProvider == SqlProviders.Postgres)
{
    <div class="d-flex flex-row align-center">
        <MudTextField Class="mt-2 mr-1" @bind-Value=_sqlSettings.Host Label=@Localizer["HostLabel"] Immediate TextChanged="OnHostChanged" />
        <MudTextField Class="mt-2 mx-1" @bind-Value=_sqlSettings.Port Label=@Localizer["PortLabel"] Immediate TextChanged="OnPortChanged" />
        <MudTextField Class="mt-2 ml-1" @bind-Value=_sqlSettings.DbName Label=@Localizer["DatabaseNameLabel", InMemoryUserSettings.SolutionName] Immediate TextChanged="OnDdNameChanged" />
    </div>
    <div class="d-flex flex-row align-center">
        <MudTextField Class="mt-2 mr-1" @bind-Value=_sqlSettings.Username Label=@Localizer["UsernameLabel"] Immediate TextChanged="OnUsernameChanged" />
        <MudTextField Class="mt-2 ml-1" @bind-Value=_sqlSettings.Password Label=@Localizer["PasswordLabel"] Immediate TextChanged="OnPasswordChanged" />
    </div>
    <div class="d-flex flex-row align-center">
        <MudTextField Class="mt-4" @bind-Value=_connectionString Disabled=@(!_editSqlConnection) Required RequiredError=@Localizer["ConnectionStringIsRequiredError"] Label=@Localizer["SuggestedConnectionStringLabel"] />
        <MudButton OnClick=@(() => _editSqlConnection = true) Variant="Variant.Outlined" Disabled=@(_editSqlConnection || _isLoading)>@Localizer["EditBtn"]</MudButton>
    </div>
}

@if (InMemoryUserSettings.SqlProvider == SqlProviders.Other)
{
    <MudTextField Class="mt-4" @bind-Value=_connectionString Required RequiredError=@Localizer["ConnectionStringIsRequiredError"] Label=@Localizer["ConnectionStringLabel"] />
}

<MudCheckBox @bind-Value=_applyMigration Label=@Localizer["ApplyMigrationLabel"] />

<div class="d-flex flex-row mt-4 align-center">
    <MudButton OnClick="SetConnectionString" Variant="Variant.Outlined" Disabled=@(string.IsNullOrEmpty(_connectionString) || _isLoading)>
        @Localizer["SetupDbBtn"]
    </MudButton>
    @if (_isLoading)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate Class="ml-4" Size="Size.Small" />
    }
</div>

<MudText Color="Color.Error" Class="mt-6">@_errorMessage</MudText>

@code {
    private string _connectionString = string.Empty;
    private SqlSettingsViewModel _sqlSettings = new SqlSettingsViewModel
    {
        ServerName = string.Empty,
        DbName = string.Empty
    };
    private string _errorMessage = string.Empty;
    private bool _applyMigration;
    private bool _isLoading; 
    private bool _editSqlConnection;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _sqlSettings.Host = "localhost";
        _sqlSettings.Port = "5433";

        switch (InMemoryUserSettings.SqlProvider)
        {
            case SqlProviders.MSSqlServer:
                _connectionString = $"Server={_sqlSettings.ServerName};Database={GetDbName(_sqlSettings.DbName)};Trusted_Connection=True;Encrypt=True;TrustServerCertificate=True";
                break;
            case SqlProviders.Postgres:
                _sqlSettings.Username = "postgres";
                _connectionString = $"Host={_sqlSettings.Host};Port={_sqlSettings.Port};Database={GetDbName(_sqlSettings.DbName)};Username={_sqlSettings.Username};Password={_sqlSettings.Password}";
                break;
            case SqlProviders.Other:
                _connectionString = string.Empty;
                break;
            default:
                break;
        }
    }

    private async Task SetConnectionString()
    {
        if (string.IsNullOrWhiteSpace(_connectionString))
        {
            return;
        }

        _isLoading = true;
        StateHasChanged();

        try
        {
            var tokenSource = new CancellationTokenSource();
            tokenSource.CancelAfter(600000);
            var ct = tokenSource.Token;

            SqlService.SetupSqlConnection(new SolutionSettingsModel()
            {
                SolutionName = InMemoryUserSettings.SolutionName,
                SolutionPath = InMemoryUserSettings.SolutionPath,
                ArchitectureType = InMemoryUserSettings.ArchitectureType,
                CustomSolutionConfig = InMemoryUserSettings.CustomSolutionConfig,
            }, _connectionString);

            await SqlService.AddMigration(new SolutionSettingsModel()
            {
                SolutionName = InMemoryUserSettings.SolutionName,
                SolutionPath = InMemoryUserSettings.SolutionPath,
                ArchitectureType = InMemoryUserSettings.ArchitectureType,
                CustomSolutionConfig = InMemoryUserSettings.CustomSolutionConfig
            }, "Initial", _applyMigration, ct);
        
            Navigation.NavigateTo("/final");
        }
        catch (Exception ex)
        {
            _errorMessage = @Localizer["ExecutionTimeoutErrorMessage"];
        }

        _isLoading = false;
        StateHasChanged();

    }

    private void OnServerNameChanged(string value)
    {
        if (InMemoryUserSettings.SqlProvider == SqlProviders.MSSqlServer)
        {
            _connectionString = $"Server={value};Database={GetDbName(_sqlSettings.DbName)};Trusted_Connection=True;Encrypt=True;TrustServerCertificate=True";
        }
    }

    private void OnDdNameChanged(string value)
    {
        switch (InMemoryUserSettings.SqlProvider)
        {
            case SqlProviders.MSSqlServer:
                _connectionString = $"Server={_sqlSettings.ServerName};Database={GetDbName(value)};Trusted_Connection=True;Encrypt=True;TrustServerCertificate=True";
                break;
            case SqlProviders.Postgres:
                _connectionString = $"Host={_sqlSettings.Host};Port={_sqlSettings.Port};Database={GetDbName(value)};Username={_sqlSettings.Username};Password={_sqlSettings.Password}";
                break;
            default:
                break;
        }
    }

    private void OnUsernameChanged(string value)
    {
        switch (InMemoryUserSettings.SqlProvider)
        {
            case SqlProviders.MSSqlServer:
                _connectionString = $"Server={_sqlSettings.ServerName};Database={GetDbName(_sqlSettings.DbName)};Trusted_Connection=True;Encrypt=True;TrustServerCertificate=True;User Id={value};Password={_sqlSettings.Password};";
                break;
            case SqlProviders.Postgres:
                _connectionString = $"Host={_sqlSettings.Host};Port={_sqlSettings.Port};Database={GetDbName(_sqlSettings.DbName)};Username={value};Password={_sqlSettings.Password}";
                break;
            default:
                break;
        }
    }

    private void OnPasswordChanged(string value)
    {
        switch (InMemoryUserSettings.SqlProvider)
        {
            case SqlProviders.MSSqlServer:
                _connectionString = $"Server={_sqlSettings.ServerName};Database={GetDbName(_sqlSettings.DbName)};Trusted_Connection=True;Encrypt=True;TrustServerCertificate=True;User Id={_sqlSettings.Username};Password={value};";
                break;
            case SqlProviders.Postgres:
                _connectionString = $"Host={_sqlSettings.Host};Port={_sqlSettings.Port};Database={GetDbName(_sqlSettings.DbName)};Username={_sqlSettings.Username};Password={value}";
                break;
            default:
                break;
        }
    }

    private void OnHostChanged(string value)
    {
        _connectionString = $"Host={value};Port={_sqlSettings.Port};Database={GetDbName(_sqlSettings.DbName)};Username={_sqlSettings.Username};Password={_sqlSettings.Password}";
    }

    private void OnPortChanged(string value)
    {
        _connectionString = $"Host={_sqlSettings.Host};Port={value};Database={GetDbName(_sqlSettings.DbName)};Username={_sqlSettings.Username};Password={_sqlSettings.Password}";
    }

    private string GetDbName(string dbName) => string.IsNullOrEmpty(dbName) ? $"{InMemoryUserSettings.SolutionName}Db" : dbName;
}
