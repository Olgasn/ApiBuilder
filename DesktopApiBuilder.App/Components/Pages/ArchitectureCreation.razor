@page "/architecture"
@using DesktopApiBuilder.App.Services
@inherits BaseComponent
@inject IStringLocalizer<Localization> Localizer

<h3>@Localizer["InfrastructureSettingsPageTitle"]</h3>

<div class="d-flex flex-row align-center mt-2">
    <MudSelect @bind-Value=_selectedArc Label=@Localizer["ArchitectureTypeLabel"]>
        @foreach (var item in _arcTypes)
        {
            <MudSelectItem Value="@item">@Localizer[$"ArchitectureType.{item}"]</MudSelectItem>
        }
    </MudSelect>

    @if (_selectedArc == ArchitectureType.Custom)
    {
        <MudTextField Value="_customConfigFile?.Name" Label=@Localizer["ConfigFileNameLabel"] Disabled Class="mx-4" />
        <MudFileUpload T="IBrowserFile" FilesChanged="UploadFile" Accept=".json">
            <ButtonTemplate>
                <MudButton HtmlTag="label"
                           Variant="Variant.Outlined"
                           StartIcon="@Icons.Material.Filled.UploadFile"
                           Disabled="_isCreateButtonDisabled"
                           for="@context.Id">
                    @Localizer["UploadConfigFileBtn"]
                </MudButton>
            </ButtonTemplate>
        </MudFileUpload>
    }
</div>

@if (_selectedArc == ArchitectureType.Custom)
{
    <MudLink Href="/custom-config-setup" Class="mt-1">@Localizer["CustomArchitectureSetupLink"]</MudLink>
}

<MudSelect @bind-Value=_selectedIdType Label=@Localizer["IdTypeLabel"] Class="mt-4">
    @foreach (var item in _idTypes)
    {
        <MudSelectItem Value="@item" />
    }
</MudSelect>

<MudSelect @bind-Value=_selectedSqlProvider Label=@Localizer["SQLProviderMessage"] Class="mt-4">
    @foreach (var item in _sqlProviders)
    {
        <MudSelectItem Value="@item">@Localizer[$"SqlProviders.{item}"]</MudSelectItem>
    }
</MudSelect>

<div class="d-flex flex-row mt-4 align-center">
    <MudButton OnClick="CreateProjects" Variant="Variant.Outlined" Disabled="_isCreateButtonDisabled">
        @Localizer["CreateProjectsBtn"]</MudButton>

    @if (_isLoading)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate Class="ml-4" Size="Size.Small" />
    }
</div>

<MudText Color="Color.Success" Class="mt-6">@_message</MudText>
<MudText Color="Color.Error" Class="mt-6">@_errorMessage</MudText>

@if (!string.IsNullOrEmpty(_message))
{
    <MudButton Href="/domain" Variant="Variant.Outlined" Class="mt-4">
        @Localizer["NextBtn"]</MudButton>
}

@code {
    // TODO: change it
    private List<ArchitectureType> _arcTypes = [ArchitectureType.ThreeLayered, ArchitectureType.Clean, ArchitectureType.Custom];
    private List<IdType> _idTypes = [IdType.Int, IdType.Guid];
    private List<SqlProviders> _sqlProviders = [SqlProviders.MSSqlServer, SqlProviders.Postgres]; // TODO: add SqlProviders.Other support

    private ArchitectureType _selectedArc;
    private IdType _selectedIdType;
    private SqlProviders _selectedSqlProvider = SqlProviders.MSSqlServer;

    private IBrowserFile? _customConfigFile;

    private string _message = string.Empty;
    private string _errorMessage = string.Empty;
    private bool _isCreateButtonDisabled;
    private bool _isLoading;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _selectedArc = _arcTypes[0];
    }

    private async void CreateProjects()
    {
        _isCreateButtonDisabled = true;
        _isLoading = true;
        StateHasChanged();

        InMemoryUserSettings.ArchitectureType = _selectedArc;
        InMemoryUserSettings.IdType = _selectedIdType;
        InMemoryUserSettings.SqlProvider = _selectedSqlProvider;
        InMemoryUserSettings.CustomSolutionConfig = await ConfigHelper.GetCustomSolutionConfig(_customConfigFile);

        try
        {
            var tokenSource = new CancellationTokenSource();
            tokenSource.CancelAfter(300000);
            var ct = tokenSource.Token;

            await ProjectService.CreateProjects(new SolutionSettingsModel()
            {
                SolutionName = InMemoryUserSettings.SolutionName,
                SolutionPath = InMemoryUserSettings.SolutionPath,
                ArchitectureType = InMemoryUserSettings.ArchitectureType,
                CustomSolutionConfig = InMemoryUserSettings.CustomSolutionConfig
            }, ct);

            await ProjectDependenciesService.AddProjectReferences(new SolutionSettingsModel()
            {
                SolutionName = InMemoryUserSettings.SolutionName,
                SolutionPath = InMemoryUserSettings.SolutionPath,
                ArchitectureType = InMemoryUserSettings.ArchitectureType,
                CustomSolutionConfig = InMemoryUserSettings.CustomSolutionConfig
            }, ct);
            await ProjectDependenciesService.AddSqlProviderPackage(new SolutionSettingsModel()
            {
                SolutionName = InMemoryUserSettings.SolutionName,
                SolutionPath = InMemoryUserSettings.SolutionPath,
                ArchitectureType = InMemoryUserSettings.ArchitectureType,
                CustomSolutionConfig = InMemoryUserSettings.CustomSolutionConfig,
                SqlProvider = InMemoryUserSettings.SqlProvider
            }, ct);

            _message = Localizer["ProjectsCreatedMessage", InMemoryUserSettings.SolutionName];
        }
        catch
        {
            _errorMessage = Localizer["ExecutionTimeoutErrorMessage"];
        }
        
        _isLoading = false;
        StateHasChanged();
    }

    private void UploadFile(IBrowserFile file)
    {
        _customConfigFile = file;
    }
}
