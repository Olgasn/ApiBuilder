@page "/architecture"
@using DesktopApiBuilder.App.Services
@using DesktopApiBuilder.App.Data.Enums

<h3>Infrastructure settings</h3>

<MudSelect @bind-Value=_selectedArc Label="Architecture Type" Class="mt-2">
    @foreach (var item in _arcTypes)
    {
        <MudSelectItem Value="@item"/>
    }
</MudSelect>

<MudSelect @bind-Value=_selectedIdType Label="Id Type" Class="mt-4">
    @foreach (var item in _idTypes)
    {
        <MudSelectItem Value="@item" />
    }
</MudSelect>

<MudSelect @bind-Value=_selectedSqlProvider Label="SQL Provider" Class="mt-4">
    @foreach (var item in _sqlProviders)
    {
        <MudSelectItem Value="@item" />
    }
</MudSelect>

<div class="d-flex flex-row mt-4 align-center">
    <MudButton OnClick="CreateProjects" Variant="Variant.Outlined" Disabled="_isCreateButtonDisabled">Create projects</MudButton>

    @if (_isLoading)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate Class="ml-4" Size="Size.Small" />
    }
</div>

<MudText Color="Color.Success" Class="mt-6">@_message</MudText>
<MudText Color="Color.Error" Class="mt-6">@_errorMessage</MudText>

@if (!string.IsNullOrEmpty(_message))
{
    <MudButton Href="/domain" Variant="Variant.Outlined" Class="mt-4">Next</MudButton>
}

@code {
    // TODO: change it
    private List<ArchitectureType> _arcTypes = new() { ArchitectureType.ThreeLayered, ArchitectureType.Clean };
    private List<IdType> _idTypes = new() { IdType.Int, IdType.Guid };
    private List<SqlProviders> _sqlProviders = [SqlProviders.MSSqlServer, SqlProviders.Postgres]; // TODO: add SqlProviders.Other support

    private ArchitectureType _selectedArc;
    private IdType _selectedIdType;
    private SqlProviders _selectedSqlProvider = SqlProviders.MSSqlServer;

    private string _message = string.Empty;
    private string _errorMessage = string.Empty;
    private bool _isCreateButtonDisabled;
    private bool _isLoading;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _selectedArc = _arcTypes[0];
    }

    private async void CreateProjects()
    {
        _isCreateButtonDisabled = true;
        _isLoading = true;
        StateHasChanged();

        InMemoryUserSettings.ArchitectureType = _selectedArc;
        InMemoryUserSettings.IdType = _selectedIdType;
        InMemoryUserSettings.SqlProvider = _selectedSqlProvider;

        try
        {
            var tokenSource = new CancellationTokenSource();
            tokenSource.CancelAfter(12000);
            var ct = tokenSource.Token;

            await Task.Run(() =>
            {
                ProjectService.CreateProjects(new SolutionSettingsModel()
                {
                    SolutionName = InMemoryUserSettings.SolutionName,
                    SolutionPath = InMemoryUserSettings.SolutionPath,
                    ArchitectureType = InMemoryUserSettings.ArchitectureType
                }, ct);
            }, ct);

            await Task.Run(() =>
            {
                ProjectDependenciesService.AddProjectReferences(new SolutionSettingsModel()
                {
                    SolutionName = InMemoryUserSettings.SolutionName,
                    SolutionPath = InMemoryUserSettings.SolutionPath,
                    ArchitectureType = InMemoryUserSettings.ArchitectureType
                });
                ProjectDependenciesService.AddSqlProviderPackage(new SolutionSettingsModel()
                {
                    SolutionName = InMemoryUserSettings.SolutionName,
                    SolutionPath = InMemoryUserSettings.SolutionPath,
                    ArchitectureType = InMemoryUserSettings.ArchitectureType,
                    SqlProvider = InMemoryUserSettings.SqlProvider
                });
            }, ct);

            _message = $"Projects for solution \"{InMemoryUserSettings.SolutionName}\" were succesfully created!";
        }
        catch
        {
            _errorMessage = "Execution timeout: something went wrong!";
        }
        
        _isLoading = false;
        StateHasChanged();
    }
}
