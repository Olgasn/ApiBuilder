@page "/"

<MudGrid>
    <MudItem xs="12">
        <div style="display: flex; align-items: flex-end;">
            <MudTextField @bind-Value="_solutionPath" Required RequiredError="Solution path is required" Label="Solution Path" Class="mr-4" />
            <MudButton OnClick="ChooseFolder" Variant="Variant.Outlined" Class="mt-4">Choose folder</MudButton>
        </div>
    </MudItem>
    <MudItem xs="12">
        <MudTextField @bind-Value="_solutionName" Required RequiredError="Solution name is required" Label="Solution Name" />
    </MudItem>
</MudGrid>


<MudButton OnClick="CreateSolution" Variant="Variant.Outlined" Class="mt-4" Disabled="!string.IsNullOrEmpty(_message)">Create solution</MudButton>

<MudText Color="Color.Success" Class="mt-6">@_message</MudText>

@if (!string.IsNullOrEmpty(_message))
{
    <MudButton Href=@($"/architecture") Variant="Variant.Outlined" Class="mt-4">Next</MudButton>
}

@code {
    private string? _solutionName;
    private string? _solutionPath = "C:/D/Projects/test";
    private string _message = string.Empty;

    private async Task ChooseFolder()
    {
        _solutionPath = await FolderPicker.PickFolder(_solutionPath);

        StateHasChanged();
    }

    private async void CreateSolution()
    {
        if (string.IsNullOrEmpty(_solutionName) || string.IsNullOrEmpty(_solutionPath))
        {
            return;
        }

        InMemoryUserSettings.SolutionName = _solutionName;
        InMemoryUserSettings.SolutionPath = _solutionPath;

        var tokenSource = new CancellationTokenSource();
        tokenSource.CancelAfter(60000);
        var ct = tokenSource.Token;

        await SolutionService.CreateSolution(new SolutionSettingsModel 
            {
                SolutionName = _solutionName,
                SolutionPath = _solutionPath
            }, ct);

        _message = $"Solution \"{_solutionName}\" was succesfully created!";
        StateHasChanged();
    }
}